<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://negibokken.github.io/feeds/chromium_issue_tracker/atom.xml</id>
    <title>Chromium issue tracker feed</title>
    <link href="https://negibokken.github.io/feeds/intent_to_ship/atom.xml" rel="self"/>
    <updated>2024-02-29T20:13:56.064Z</updated>
    <entry>
        <id>327506365</id>
        <title>V8 correctness failure in sources: 51</title>
        <author>
            <name>24...@project.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327506365"/>
        <updated>2024-02-29T20:13:56.064Z</updated>
        <summary>-</summary>
        <content type="html">Detailed Report: https://clusterfuzz.com/testcase?key=5806646546071552

Fuzzer: foozzie_js_fuzzer
Job Type: v8_foozzie_v2
Platform Id: linux

Crash Type: V8 correctness failure
Crash Address: 
Crash State:
  sources: 51
  
Sanitizer: address (ASAN)

Regressed: https://clusterfuzz.com/revisions?job=v8_foozzie_v2&amp;range=92602:92603

Reproducer Testcase: https://clusterfuzz.com/download?testcase_id=5806646546071552

Issue filed automatically.

To reproduce this, please build the target in this report and run it against the reproducer testcase. Please use the GN arguments provided at bottom of this report when building the binary. 

If you have trouble reproducing, please also export the environment variables listed under "[Environment]" in the crash stacktrace.

If you have any feedback on reproducing test cases, let us know at https://forms.gle/Yh3qCYFveHj6E5jz5 so we can improve.
</content>
    </entry>
    <entry>
        <id>327477183</id>
        <title>base_persistent_histogram_allocator_fuzzer: Overwrites-const-input in base_persistent_histogram_allocator_fuzzer</title>
        <author>
            <name>24...@project.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327477183"/>
        <updated>2024-02-29T20:07:15.200Z</updated>
        <summary>-</summary>
        <content type="html">Detailed Report: https://clusterfuzz.com/testcase?key=4871191000449024

Fuzzing Engine: libFuzzer
Fuzz Target: base_persistent_histogram_allocator_fuzzer
Job Type: libfuzzer_chrome_msan
Platform Id: linux

Crash Type: Overwrites-const-input
Crash Address: 
Crash State:
  base_persistent_histogram_allocator_fuzzer
  
Sanitizer: memory (MSAN)

Regressed: https://clusterfuzz.com/revisions?job=libfuzzer_chrome_msan&amp;range=1264921:1264923

Reproducer Testcase: https://clusterfuzz.com/download?testcase_id=4871191000449024

Issue filed automatically.

See https://www.chromium.org/developers/testing/memorysanitizer#TOC-Reproducing-ClusterFuzz-Bugs for instructions on reproducing this bug locally.</content>
    </entry>
    <entry>
        <id>327558597</id>
        <title>Respond to WM_GETTITLEBARINFOEX and populate TITLEBARINFO  with the frame of the maximize button</title>
        <author>
            <name>be...@microsoft.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327558597"/>
        <updated>2024-02-29T20:06:30.020Z</updated>
        <summary>-</summary>
        <content type="html">In April 2023, we learned that the maximize button in Windows 11 was using an accessibility API. We then learned directly from the Windows team that they were doing this to get the bouding box of the maximize button, to know where to position the snap window layout view in the screen. However, they confirmed they only used the accessibility API as a last resort, and that there's a way we (chromium) could expose the right information to the OS that would make them take a different path than the fallback solution relying on UIA.

The solution is to "respond to the WM_GETTITLEBARINFOEX on your frame window and populate the TITLEBARINFO struct with the RECT of your maximize button.". This sounds like a fairly scoped change that should improve performance quite a bit, since it wouldn't enable the kNativeAPIs accessibility mode.

Filing this bug here so we go fix this bug as soon as possible.</content>
    </entry>
    <entry>
        <id>327646080</id>
        <title>Add service support for adding to existing group</title>
        <author>
            <name>em...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327646080"/>
        <updated>2024-02-29T19:56:52.819Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327644647</id>
        <title>ModuleTestData.__add__ can silently drop test data in unexpected ways.</title>
        <author>
            <name>ia...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327644647"/>
        <updated>2024-02-29T19:50:36.239Z</updated>
        <summary>-</summary>
        <content type="html">This is likely just a symptom of "the recipe testing system is secret, magical and sucky", but nevertheless this bit me and I wrote the damn thing :(.

# Problem

Module test data is keyed on a pair of strings, the module name (e.g. `recipe_engine/path`) and then another string chosen by the module's TestApi (e.g. `files_exist`, which is what `api.path.exists(...)` will return). Logically this leads to a nested dictionary structure like:

```python
TestData({
  mod_data={
    "recipe_enigne/path": ModuleTestData({
      files_exist = [Path, Path, Path, ...],
    }),
  }
})
```

TestData objects are "added" together with `__add__()`. This attempts to merge the TestData together, including calling `__add__()` on ModuleTestData.

However, `ModuleTestData.__add__()` is implemented as:
  
```python
ret = ModuleTestData()
ret.update(self)
ret.update(other)
return ret
```

Where `...update()` is the exact same as `dict.update()` (ModuleTestData subclasses `dict`)

This means means that `__add__` can LOSE test data unexpectedly... consider:
 
```python
yield api.test('basic',
  api.path.exists(aPath),
  api.path.exists(anotherPath)
) # api.test() will 'add' together all TestData passed to it.
```

The first `exists` call will return a `ModuleTestData(files_exist=[aPath])` and the second
will return `ModuleTestData(files_exist=[anotherPath])`. But result of adding them will be that there is only a single `ModuleTestData` with `files_exist=[anotherPath]`, when the author likely intended to have it be `files_exist=[aPath, anotherPath]`. 

# Solution (?)

I'm not sure what the right path forward is, but I think we need to do one of:

## Make `ModuleTestData.__add__` smarter

This would add additional complexity, and needs to be carefully considered... is it just lists and dicts? Subclasses? Should test data be allowed to implement it's own `__add__` behavior?

## Make `ModuleTestData.__add__` louder

This would simply change `__add__` to error out if it causes data loss (i.e. `self` and `other` contain the same key).

This could potentially impact a bunch of existing tests, either revealing bugs in the tests, or accidental reliance on the previous behavior.

## Switch away from python __add__ fanciness with protos

Another approach would be to keep the existing behavior for python types, but use `message.Clone` &amp;&amp; `message.MergeFrom` if the dict values are proto `message.Message` instances. We could document this behavior and it should be good enough for the use cases that I know of, but potentially wouldn't allow other modules the flexibility they want.

There is another potential advantage to protos, however, which is that we could move to making the TestData object *entirely* a proto, and if we could do this we could more effectively decouple the test orchestrator and test runners in `repices.py test`. Right now the orchestrator enumerates GenTests to find all test case names, and then sends the recipe+testname pair to the test runner which ALSO enumerates GenTests to find the matching test name. If the yielded TestData was a proto instead, then it could be enumerated and sent across the wire directly to the recipe test runner processes to be executed.</content>
    </entry>
    <entry>
        <id>327558596</id>
        <title>conformance/rendering/gl-drawelements.html consistently failing on certain x64 Macs</title>
        <author>
            <name>bs...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327558596"/>
        <updated>2024-02-29T19:47:05.690Z</updated>
        <summary>-</summary>
        <content type="html">Starting in [this build](https://ci.chromium.org/ui/p/chromium/builders/ci/Mac%20FYI%20Release%20(Intel)/44547/overview), conformance/rendering/gl-drawelements.html has started failing on Macs with Intel GPUs.

Sample failure:

```
Unexpected exception while running conformance/rendering/gl-drawelements.html
Traceback (most recent call last):
  File "/Volumes/Work/s/w/ir/content/test/gpu/gpu_tests/gpu_integration_test.py", line 629, in _RunGpuTest
    self.RunActualGpuTest(url, args)
  File "/Volumes/Work/s/w/ir/content/test/gpu/gpu_tests/webgl_conformance_integration_test_base.py", line 254, in RunActualGpuTest
    getattr(self, test_name)(test_path, test_args)
  File "/Volumes/Work/s/w/ir/content/test/gpu/gpu_tests/webgl_conformance_integration_test_base.py", line 419, in _RunConformanceTest
    self._CheckTestCompletion()
  File "/Volumes/Work/s/w/ir/content/test/gpu/gpu_tests/webgl_conformance_integration_test_base.py", line 412, in _CheckTestCompletion
    self.fail('GPU process crashed during test.\n' +
  File "/Volumes/Work/s/w/ir/.task_template_vpython_cache/vpython/store/cpython+jbeiavuv8lqgjcttbgv9hc9v9k/contents/lib/python3.8/unittest/case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: GPU process crashed during test.
getError expected: NO_ERROR. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)
Error in program linking:
FAIL getError expected: NO_ERROR. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)
getError expected: NO_ERROR. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_BYTE, 0)
FAIL getError expected: NO_ERROR. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_BYTE, 0)
getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(desktopGL.QUAD_STRIP, 4, gl.UNSIGNED_BYTE, 0)
FAIL getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(desktopGL.QUAD_STRIP, 4, gl.UNSIGNED_BYTE, 0)
getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(desktopGL.QUADS, 4, gl.UNSIGNED_BYTE, 0)
FAIL getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(desktopGL.QUADS, 4, gl.UNSIGNED_BYTE, 0)
getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(desktopGL.POLYGON, 4, gl.UNSIGNED_BYTE, 0)
FAIL getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(desktopGL.POLYGON, 4, gl.UNSIGNED_BYTE, 0)
getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.FLOAT, 0)
FAIL getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.FLOAT, 0)
getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.SHORT, 0)
FAIL getError expected: INVALID_ENUM. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 3, gl.SHORT, 0)
getError expected: NO_ERROR. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 2, gl.UNSIGNED_SHORT, 2)
FAIL getError expected: NO_ERROR. Was INVALID_OPERATION : after evaluating: gl.drawElements(gl.TRIANGLES, 2, gl.UNSIGNED_SHORT, 2)
...
Thread 0 (crashed)
 0  Chromium Framework!crash_reporter::DumpWithoutCrashing() + 0x5a
    rax = 0x0000000000000000   rdx = 0x0000000000000000
    rcx = 0x0000000142a04318   rbx = 0x00007ff7b331ad30
    rsi = 0x000001140c1df160   rdi = 0x00007ff7b331ad30
    rbp = 0x00007ff7b331adf0   rsp = 0x00007ff7b331ad30
     r8 = 0x00007ff854e5b540    r9 = 0x0000000000000000
    r10 = 0x0000000142944398   r11 = 0xfffffeed369d9358
    r12 = 0x0000000142a042f8   r13 = 0x0000000000000000
    r14 = 0x00007ff7b331ae58   r15 = 0x00000001422e49d0
    rip = 0x000000013ab712ba
    Found by: given as instruction pointer in context
 1  Chromium Framework!base::debug::DumpWithoutCrashing(base::Location const&amp;, base::TimeDelta) + 0x152
    rbp = 0x00007ff7b331ae40   rsp = 0x00007ff7b331ae00
    rip = 0x0000000137be4e22
    Found by: previous frame's frame pointer
 2  Chromium Framework!gpu::DawnContextProvider::OnError(WGPUErrorType, char const*) + 0xc7
    rbp = 0x00007ff7b331afb0   rsp = 0x00007ff7b331ae50
    rip = 0x000000013a81c607
    Found by: previous frame's frame pointer
 3  Chromium Framework!dawn::native::DeviceBase::HandleError(std::__Cr::unique_ptr&lt;dawn::native::ErrorData, std::__Cr::default_delete&lt;dawn::native::ErrorData&gt;&gt;, dawn::native::InternalErrorType, WGPUDeviceLostReason) + 0x562
    rbp = 0x00007ff7b331b1d0   rsp = 0x00007ff7b331afc0
    rip = 0x0000000131223da2
    Found by: previous frame's frame pointer
 4  Chromium Framework!dawn::native::QueueBase::APISubmit(unsigned int, dawn::native::CommandBufferBase* const*) + 0xc8
    rbp = 0x00007ff7b331b230   rsp = 0x00007ff7b331b1e0
    rip = 0x0000000131278f78
    Found by: previous frame's frame pointer
 5  Chromium Framework!dawn::native::NativeQueueSubmit(WGPUQueueImpl*, unsigned long, WGPUCommandBufferImpl* const*) + 0x40
    rbp = 0x00007ff7b331b260   rsp = 0x00007ff7b331b240
    rip = 0x00000001311a4130
    Found by: previous frame's frame pointer
 6  Chromium Framework!skgpu::graphite::DawnQueueManager::onSubmitToGpu() + 0x52
    rbp = 0x00007ff7b331b2a0   rsp = 0x00007ff7b331b270
    rip = 0x0000000130a01662
    Found by: previous frame's frame pointer
 7  Chromium Framework!skgpu::graphite::QueueManager::submitToGpu() + 0xca
    rbp = 0x00007ff7b331b310   rsp = 0x00007ff7b331b2b0
    rip = 0x00000001309baa7a
    Found by: previous frame's frame pointer
 8  Chromium Framework!skgpu::graphite::Context::submit(skgpu::graphite::SyncToCpu) + 0x69
    rbp = 0x00007ff7b331b340   rsp = 0x00007ff7b331b320
    rip = 0x0000000130987519
    Found by: previous frame's frame pointer
 9  Chromium Framework!viz::SkiaOutputSurfaceImplOnGpu::FinishPaintRenderPass(gpu::Mailbox const&amp;, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect const&amp;, bool) + 0x89e
    rbp = 0x00007ff7b331b640   rsp = 0x00007ff7b331b350
    rip = 0x0000000140104d0e
    Found by: previous frame's frame pointer
10  Chromium Framework!void base::internal::DecayedFunctorTraits&lt;void (viz::SkiaOutputSurfaceImplOnGpu::*)(gpu::Mailbox const&amp;, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect const&amp;, bool), viz::SkiaOutputSurfaceImplOnGpu*, gpu::Mailbox&amp;&amp;, sk_sp&lt;GrDeferredDisplayList&gt;&amp;&amp;, sk_sp&lt;GrDeferredDisplayList&gt;&amp;&amp;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;&amp;&amp;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;&amp;&amp;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;&amp;&amp;, base::OnceCallback&lt;void ()&gt;&amp;&amp;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;&amp;&amp;, gfx::Rect&amp;&amp;, bool&amp;&amp;&gt;::Invoke&lt;void (viz::SkiaOutputSurfaceImplOnGpu::*)(gpu::Mailbox const&amp;, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect const&amp;, bool), viz::SkiaOutputSurfaceImplOnGpu*, gpu::Mailbox, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect, bool&gt;(void (viz::SkiaOutputSurfaceImplOnGpu::*)(gpu::Mailbox const&amp;, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect const&amp;, bool), viz::SkiaOutputSurfaceImplOnGpu*&amp;&amp;, gpu::Mailbox&amp;&amp;, sk_sp&lt;GrDeferredDisplayList&gt;&amp;&amp;, sk_sp&lt;GrDeferredDisplayList&gt;&amp;&amp;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;&amp;&amp;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;&amp;&amp;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;&amp;&amp;, base::OnceCallback&lt;void ()&gt;&amp;&amp;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;&amp;&amp;, gfx::Rect&amp;&amp;, bool&amp;&amp;) + 0xdf
    rbp = 0x00007ff7b331b6f0   rsp = 0x00007ff7b331b650
    rip = 0x00000001400e7b9f
    Found by: previous frame's frame pointer
11  Chromium Framework!base::internal::Invoker&lt;base::internal::FunctorTraits&lt;void (viz::SkiaOutputSurfaceImplOnGpu::*&amp;&amp;)(gpu::Mailbox const&amp;, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect const&amp;, bool), viz::SkiaOutputSurfaceImplOnGpu*, gpu::Mailbox&amp;&amp;, sk_sp&lt;GrDeferredDisplayList&gt;&amp;&amp;, sk_sp&lt;GrDeferredDisplayList&gt;&amp;&amp;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;&amp;&amp;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;&amp;&amp;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;&amp;&amp;, base::OnceCallback&lt;void ()&gt;&amp;&amp;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;&amp;&amp;, gfx::Rect&amp;&amp;, bool&amp;&amp;&gt;, base::internal::BindState&lt;true, true, false, void (viz::SkiaOutputSurfaceImplOnGpu::*)(gpu::Mailbox const&amp;, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect const&amp;, bool), base::internal::UnretainedWrapper&lt;viz::SkiaOutputSurfaceImplOnGpu, base::unretained_traits::MayNotDangle, (partition_alloc::internal::RawPtrTraits)0&gt;, gpu::Mailbox, sk_sp&lt;GrDeferredDisplayList&gt;, sk_sp&lt;GrDeferredDisplayList&gt;, std::__Cr::unique_ptr&lt;skgpu::graphite::Recording, std::__Cr::default_delete&lt;skgpu::graphite::Recording&gt;&gt;, std::__Cr::vector&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;, std::__Cr::allocator&lt;base::raw_ptr&lt;viz::ImageContextImpl, (partition_alloc::internal::RawPtrTraits)1&gt;&gt;&gt;, std::__Cr::vector&lt;gpu::SyncToken, std::__Cr::allocator&lt;gpu::SyncToken&gt;&gt;, base::OnceCallback&lt;void ()&gt;, base::OnceCallback&lt;void (gfx::GpuFenceHandle)&gt;, gfx::Rect, bool&gt;, void ()&gt;::RunOnce(base::internal::BindStateBase*) + 0x85
    rbp = 0x00007ff7b331b780   rsp = 0x00007ff7b331b700
    rip = 0x00000001400e79c5
    Found by: previous frame's frame pointer
12  Chromium Framework!base::OnceCallback&lt;void ()&gt;::Run() &amp;&amp; + 0x40
    rbp = 0x00007ff7b331b7e0   rsp = 0x00007ff7b331b790
    rip = 0x00000001304ba270
    Found by: previous frame's frame pointer
13  Chromium Framework!base::internal::Invoker&lt;base::internal::FunctorTraits&lt;viz::SkiaOutputSurfaceImpl::FlushGpuTasksWithImpl(viz::SkiaOutputSurfaceImpl::SyncMode, viz::SkiaOutputSurfaceImplOnGpu*)::$_0&amp;&amp;, std::__Cr::vector&lt;base::OnceCallback&lt;void ()&gt;, std::__Cr::allocator&lt;base::OnceCallback&lt;void ()&gt;&gt;&gt;&amp;&amp;, viz::SkiaOutputSurfaceImpl::SyncMode&amp;&amp;, base::WaitableEvent*&amp;&amp;, viz::SkiaOutputSurfaceImplOnGpu*&amp;&amp;, bool&amp;&amp;, bool&amp;&amp;, base::TimeTicks&amp;&amp;&gt;, base::internal::BindState&lt;false, false, false, viz::SkiaOutputSurfaceImpl::FlushGpuTasksWithImpl(viz::SkiaOutputSurfaceImpl::SyncMode, viz::SkiaOutputSurfaceImplOnGpu*)::$_0, std::__Cr::vector&lt;base::OnceCallback&lt;void ()&gt;, std::__Cr::allocator&lt;base::OnceCallback&lt;void ()&gt;&gt;&gt;, viz::SkiaOutputSurfaceImpl::SyncMode, base::internal::UnretainedWrapper&lt;base::WaitableEvent, base::unretained_traits::MayNotDangle, (partition_alloc::internal::RawPtrTraits)0&gt;, base::internal::UnretainedWrapper&lt;viz::SkiaOutputSurfaceImplOnGpu, base::unretained_traits::MayNotDangle, (partition_alloc::internal::RawPtrTraits)0&gt;, bool, bool, base::TimeTicks&gt;, void ()&gt;::RunOnce(base::internal::BindStateBase*) + 0x10a
    rbp = 0x00007ff7b331b8b0   rsp = 0x00007ff7b331b7f0
    rip = 0x00000001400e967a
    Found by: previous frame's frame pointer
14  Chromium Framework!base::OnceCallback&lt;void ()&gt;::Run() &amp;&amp; + 0x40
    rbp = 0x00007ff7b331b910   rsp = 0x00007ff7b331b8c0
    rip = 0x00000001304ba270
    Found by: previous frame's frame pointer
15  Chromium Framework!gpu::SchedulerDfs::ExecuteSequence(base::IdType&lt;gpu::SyncPointOrderData, unsigned int, 0u, 1u&gt;) + 0x409
    rbp = 0x00007ff7b331bae0   rsp = 0x00007ff7b331b920
    rip = 0x0000000139bf1a79
    Found by: previous frame's frame pointer
16  Chromium Framework!gpu::SchedulerDfs::RunNextTask() + 0x1ee
    rbp = 0x00007ff7b331bcb0   rsp = 0x00007ff7b331baf0
    rip = 0x0000000139bf0c0e
    Found by: previous frame's frame pointer
```

https://chromium-review.googlesource.com/c/chromium/src/+/5301250 is the most suspicious CL in the blamelist. It's supposed to be for Lacros, but it's Dawn-related and touches a file that's in the stack trace as well. Assigning to the CL author for now. Will check that the trybot passes with the revert before submitting.</content>
    </entry>
    <entry>
        <id>327643494</id>
        <title>Better support Parameterized tests with multiple flag configurations</title>
        <author>
            <name>hn...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327643494"/>
        <updated>2024-02-29T19:43:18.975Z</updated>
        <summary>-</summary>
        <content type="html"></content>
    </entry>
    <entry>
        <id>327643056</id>
        <title>Migrate usages of SharedPreferences in //components to SharedPreferencesManager</title>
        <author>
            <name>hn...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327643056"/>
        <updated>2024-02-29T19:41:41.411Z</updated>
        <summary>-</summary>
        <content type="html"></content>
    </entry>
    <entry>
        <id>327642665</id>
        <title>Clean up workarounds due to CachedFlag not being supported in //components</title>
        <author>
            <name>hn...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327642665"/>
        <updated>2024-02-29T19:36:36.279Z</updated>
        <summary>-</summary>
        <content type="html"></content>
    </entry>
    <entry>
        <id>327641887</id>
        <title>Lack of feedback from screen reader when adjusting side panel width</title>
        <author>
            <name>ca...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327641887"/>
        <updated>2024-02-29T19:31:14.794Z</updated>
        <summary>-</summary>
        <content type="html">OBSERVED RESULTS:

1. There is lack of feedback from the screen reader when users adjust the side panel width

EXPECTED RESULTS:

- Screen reader is able to convey some kind of feedback to users after resizing the side panel width

STEPS TO REPRODUCE:

0. Enable screen reader
1. Open Chrome and navigate to a page with some textual information like wikipedia
2. Activate Chrome menu and select or enable Reading Mode
3. Navigate to the resizing control for the side panel
4. Use left or right arrow keys to adjust, observe announcements</content>
    </entry>
    <entry>
        <id>327641919</id>
        <title>Lack of feedback from screen reader when adjusting font size</title>
        <author>
            <name>ca...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327641919"/>
        <updated>2024-02-29T19:29:15.286Z</updated>
        <summary>-</summary>
        <content type="html">OBSERVED RESULTS:

1. There is lack of feedback from the screen reader when users change the font size in Reading mode panel

EXPECTED RESULTS:

- Screen reader is able to convey some kind of feedback to users after interacting with the font size controls as a confirmation that something happened following their action

STEPS TO REPRODUCE:

0. Enable screen reader
1. Open Chrome and navigate to a page with some textual information like wikipedia
2. Activate Chrome menu and select or enable Reading Mode
3. Navigate to the toolbar
4. Change font size, observe announcements
</content>
    </entry>
    <entry>
        <id>327640283</id>
        <title> Out of bound UMA histogram call in model_quality_logs_uploader_service.cc::OnURLLoadComplete</title>
        <author>
            <name>sp...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327640283"/>
        <updated>2024-02-29T19:23:20.391Z</updated>
        <summary>-</summary>
        <content type="html">Similar to b/327639671:

This call isn't right:
```
    base::UmaHistogramEnumeration(
        "OptimizationGuide.ModelQualityLogsUploaderService.Status",
        static_cast&lt;net::HttpStatusCode&gt;(response_code),
        net::HTTP_VERSION_NOT_SUPPORTED);
```

HttpStatusCode only contains a subset of all status codes. IIRC in practice servers can return whatever they want (like 599). And HTTP_VERSION_NOT_SUPPORTED is not the max response code registered in iana (https://www.iana.org/assignments/http-status-codes/http-status-codes.xml). We probably should just use a sparse histogram here.

Low priority because I have no indication this is being an issue in the wild, given we control the server and it doesn't return these error codes.</content>
    </entry>
    <entry>
        <id>327558594</id>
        <title>Add --remote-debugging-address switch support to Chrome for Testing</title>
        <author>
            <name>kv...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327558594"/>
        <updated>2024-02-29T19:20:11.771Z</updated>
        <summary>-</summary>
        <content type="html"> --remote-debugging-address is supported by old headless and a lot of headless users came to depend on it, see https://crbug.com/41487252

New headless does not support this switch due to security concerns, however, Chrome for Testing has lower security expectations, see here go/chrome-for-testing, so --remote-debugging-address vulnerability is less of a problem.</content>
    </entry>
    <entry>
        <id>327639671</id>
        <title>Out of bound UMA histogram call in  ModelExecutionFetcher::OnURLLoadComplete</title>
        <author>
            <name>sp...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327639671"/>
        <updated>2024-02-29T19:19:30.676Z</updated>
        <summary>-</summary>
        <content type="html">This [call](https://source.chromium.org/chromium/chromium/src/+/main:components/optimization_guide/core/model_execution/model_execution_fetcher.cc;l=267;drc=ae9863be9e0648da801a0c157bf09eee13c8089e):
```
  base::UmaHistogramEnumeration(
      "OptimizationGuide.ModelExecutionFetcher.Status",
      static_cast&lt;net::HttpStatusCode&gt;(response_code),
      net::HTTP_VERSION_NOT_SUPPORTED);
```

Implicitly CHECKs that response_code is &lt;= HTTP_VERSION_NOT_SUPPORTED.

This has two issues:
1) response_code may be -1. In that case the cast to HttpStatusCode isn't valid (in practice the enum type looks signed, so overflows). The [quality logging code](https://source.chromium.org/chromium/chromium/src/+/main:components/optimization_guide/core/model_quality/model_quality_logs_uploader_service.cc;l=127;drc=1db793249805c470052c6023f0ccdef3deaed28a) just doesn't record those. I don't know if it's the right call here.
2) HttpStatusCode only contains a subset of all status codes. IIRC in practice servers can return whatever they want (like 599). And HTTP_VERSION_NOT_SUPPORTED is not the max response code registered in iana (https://www.iana.org/assignments/http-status-codes/http-status-codes.xml). We probably should just use a sparse histogram here.

Low priority because I have no indication this is happening in the wild (just happened to me pointing to a server that refused the connection).
</content>
    </entry>
    <entry>
        <id>327638952</id>
        <title>Move back user-agent related clode to //components/version_info from //base/version_info</title>
        <author>
            <name>hn...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327638952"/>
        <updated>2024-02-29T19:15:03.932Z</updated>
        <summary>-</summary>
        <content type="html"></content>
    </entry>
    <entry>
        <id>327457605</id>
        <title>Perform GPU specific blocking for Graphite/Dawn/Vulkan on Android</title>
        <author>
            <name>ky...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327457605"/>
        <updated>2024-02-29T19:11:10.165Z</updated>
        <summary>-</summary>
        <content type="html">Graphite/Dawn/Vulkan is only ever enabled if IsUsingVulkan() is true. This does some preliminary device filtering in the browser process.

There is additional device filtering done in the GPU process after Vulkan is initialized in that switches from Ganesh/Vulkan to Ganesh/GL. This logic is mainly contained in CheckVulkanCompatibility() [here](https://source.chromium.org/chromium/chromium/src/+/main:gpu/vulkan/vulkan_util.cc;l=453-526;drc=f4a00cc248dd2dc8ec8759fb51620d47b5114090).

There is another check based on GL_RENDERER string rather than VulkanPhysicalDeviceInfo [here](https://source.chromium.org/chromium/chromium/src/+/main:gpu/ipc/service/gpu_init.cc;l=1091-1093;drc=f4a00cc248dd2dc8ec8759fb51620d47b5114090) for mediatek.</content>
    </entry>
    <entry>
        <id>327639038</id>
        <title>Auto-save group when created</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327639038"/>
        <updated>2024-02-29T19:10:48.889Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327639077</id>
        <title>Auto-pin group when created</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327639077"/>
        <updated>2024-02-29T19:10:12.474Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327638026</id>
        <title>Reorder the options</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327638026"/>
        <updated>2024-02-29T19:08:14.293Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327637616</id>
        <title>Rename hide to close</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327637616"/>
        <updated>2024-02-29T19:08:03.216Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327638128</id>
        <title>Remove save toggle</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327638128"/>
        <updated>2024-02-29T19:07:42.100Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327638235</id>
        <title>Add a delete group option under a line break</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327638235"/>
        <updated>2024-02-29T19:07:22.261Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327637828</id>
        <title>Add "Tab Groups" 3 dots menu, possibly reuse the bookmark bar overflow menu</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327637828"/>
        <updated>2024-02-29T19:05:14.408Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327554073</id>
        <title>chrome.devtools.network.getHAR Occasionally does not call the callback function passed in</title>
        <author>
            <name>na...@observepoint.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327554073"/>
        <updated>2024-02-29T19:03:26.050Z</updated>
        <summary>-</summary>
        <content type="html"># Steps to reproduce the problem
1. Visit https://diagnostics.roche.com/ph/en/home.html
2. Click around on the page, open links in new tabs and close them.
3. Attempt to collect the network log using chrome.devtools.network.getHAR
In my small rounds of testing, it fails approximately 1 out of 3 times. This was observed on a 64-bit linux system with 2vCPU and 4GB of RAM.

# Problem Description
An extension I work on allows download of the network log at will by request of the user. On a particular website (https://diagnostics.roche.com/ph/en/home.html), the chrome.devtools.network.getHAR function fails to call our callback function before a timeout of max 5 min. It seems to happen only when on the page for an extended period of time clicking on a number of the links on the page. In this period of time, the function is called 2 more times and none of them succeed once the first fails. I have enabled chrome debug logging via launch arguments and there are no issues from what I can see in the logs, however the function fails to call the callback passed in.

I have traced it to this function through logs in the extension. Any help would be appreciated!

# Additional Comments
I thought it could be related to resource limitations, but the CPU maxes out at ~60-65% and the memory was sitting at a low 15%. I am not sure if reloading the page could fix/alleviate the issue, but I wanted to bring the issue to your eyes as it seems like a flaw within Chrome. Thanks again!

# Summary
chrome.devtools.network.getHAR Occasionally does not call the callback function passed in

# Additional Data
Category: Developer Tools \
Chrome Channel: Stable \
Regression: N/A</content>
    </entry>
    <entry>
        <id>327635192</id>
        <title>Client-side Phising Detection in Bling</title>
        <author>
            <name>da...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327635192"/>
        <updated>2024-02-29T18:57:23.021Z</updated>
        <summary>-</summary>
        <content type="html">Title of the design to be reviewed

Design description:
The Safe Browsing Client-side Phishing Detection system is being ported to Bling. This document discusses how the detection system currently exists and the changes that will be introduced to bring it to Bling.</content>
    </entry>
    <entry>
        <id>327499439</id>
        <title>dispatchKeyEvent rawKeyDown and keyUp cause selection changes when they should not</title>
        <author>
            <name>au...@zeck.app</name>
        </author>
        <link href="https://issues.chromium.org/issues/327499439"/>
        <updated>2024-02-29T18:56:17.341Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : Version 120.0.6099.234 (Official Build) (arm64)  
OS                   : Mac OS 14.2.1 (23C71)  

also seen on Chromium: Version 121.0.6167.57 (Developer Build) (arm64) (playwright build v1097)


## What steps will reproduce the problem?
with html document:
```html
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;title&gt;repro man&lt;/title&gt;
  &lt;style&gt;
    p {
      padding: 20px;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p id="editable" contenteditable=true&gt;
  some text&lt;br&gt;some more text
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
```

- click into `contenteditable` to move selection inside
- in devtools console, remove selection with
  - `window.getSelection().removeAllRanges()`
- verify that focus is still on `contenteditable` with
  - `document.activeElement`
- send devtools protocol command:
```JSON
{  
  "command": "Input.dispatchKeyEvent",  
  "parameters": {  
    "type": "rawKeyDown",  
    "modifiers": 8,  
    "windowsVirtualKeyCode": 16,  
    "code": "ShiftLeft",  
    "commands": [],  
    "key": "Shift",  
    "text": "",  
    "unmodifiedText": "",  
    "autoRepeat": false,  
    "location": 1,  
    "isKeypad": false  
  }
}
```


## What is the expected result?
It should behave as though you pressed shift on the keyboard
- Selection does not change
- Focus does not change


## What happens instead?
A collapsed selection is created at the start of the `contenteditable`.

Since pressing shift on the keyboard does not cause this behavior, it seems like the devtools protocol simulation of pressing shift should not either.

## Additional context:
Ran into this issue when using playwright to test a custom text editor that needs to control browser selection. We were seeing a discrepancy between real user experience in chrome and playwright tests against chromium. Digging deeper, we found that playwright against firefox worked properly. Eventually we were able to reproduce directly in the chrome devtools protocol monitor.

In our app's case, due to specific conditions created by our code, this was occurring with a `keyUp` command, but this reproduction seems to demonstrate that it happens with `rawKeyDown` as well.


</content>
    </entry>
    <entry>
        <id>327554072</id>
        <title>Measure usage of Core Web Vitals HUD</title>
        <author>
            <name>pa...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327554072"/>
        <updated>2024-02-29T18:53:16.067Z</updated>
        <summary>-</summary>
        <content type="html">The CWV HUD can be toggled via rendering pane or the command menu. 
We don't know the usage, but are curious.

</content>
    </entry>
    <entry>
        <id>327563686</id>
        <title>Neuralink competitor Synchron to ramp up brain implant production with equity stake in manufacturer DANGER TO HUMANS..</title>
        <author>
            <name>sa...@enterprize13.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327563686"/>
        <updated>2024-02-29T18:51:16.340Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : &lt;from chrome://version/&gt;
OS                   : &lt;OS version&gt;

What steps will reproduce the problem?


What is the expected result?


What happens instead?

https://www.cnbc.com/2024/02/01/neuralink-competitor-synchron-buys-equity-stake-in-manufacturer.html#:~:text=Tesla%20and%20SpaceX%20CEO%20Elon,to%20a%20report%20from%20Bloomberg.

You can help us a lot by creating a minimal, reproducible example (https://stackoverflow.com/help/minimal-reproducible-example), e.g. on glitch.com, and/or attaching a screenshot or recording of the issue!</content>
    </entry>
    <entry>
        <id>327634480</id>
        <title>Learn more link needs additional context in interstitial page resulting from safe browsing</title>
        <author>
            <name>ca...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327634480"/>
        <updated>2024-02-29T18:50:15.501Z</updated>
        <summary>-</summary>
        <content type="html">OBSERVED RESULTS:

1. The Learn more link needs additional context (Learn more what?) on interstitial page that appears from safe browsing

2. Screenshot: https://screenshot.googleplex.com/Aem4v4secXjBBxR.png

EXPECTED RESULTS:

- Provide additional context in the control's accessible label, e.g. "Learn more about &lt;target name&gt;"

STEPS TO REPRODUCE:

0. Enable screen reader
1. Open Chrome and navigate to chrome://settings/security
2. Select either Enhanced or Standard protection
3. Open new tab and navigate to https://testsafebrowsing.appspot.com 
4. Select any of the phishing, malware, or unwanted software warning links under the “Webpage Warnings” section
5. Navigate to "Learn more" link on the page that appears</content>
    </entry>
    <entry>
        <id>327633653</id>
        <title>Label description not included in radio button's accessible label</title>
        <author>
            <name>ca...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327633653"/>
        <updated>2024-02-29T18:44:48.767Z</updated>
        <summary>-</summary>
        <content type="html">OBSERVED RESULTS:

1. The secondary label or description for the Safe Browsing radio button options are not conveyed by screen reader. Because the default keyboard interaction is to use arrow keys to toggle between the radio buttons, screen readers will have a hard time accessing the secondary descriptions. They would have to tab out which will move focus to the chevron icons and will have to use up arrow key from there to read the descriptions which is not ideal or logical.

2. Screenshot: https://screenshot.googleplex.com/BvTcEWSXAqXJH9i.png

EXPECTED RESULTS:

- Include secondary label or description to the radio buttons so screen reader can convey all the information users need when the controls are on focus. This is consistent with the other controls on the page with descriptions.

STEPS TO REPRODUCE:

0. Enable screen reader
1. Open Chrome and navigate to chrome://settings/security
2. Navigate to the radio buttons
3. Use arrow keys to try to read the secondary labels or descriptions
</content>
    </entry>
    <entry>
        <id>327457604</id>
        <title>Implement HaTS surveys for desktop download warnings</title>
        <author>
            <name>ch...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327457604"/>
        <updated>2024-02-29T18:38:56.264Z</updated>
        <summary>-</summary>
        <content type="html">(internal) go/hats-download-warnings-dd</content>
    </entry>
    <entry>
        <id>327620810</id>
        <title>[Topics] Change topics result UMA metrics to enum types</title>
        <author>
            <name>ya...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327620810"/>
        <updated>2024-02-29T18:38:22.824Z</updated>
        <summary>-</summary>
        <content type="html">Chirp alert lacks bucket proportion monitoring for numeric types. Only enum types are supported for such monitoring.</content>
    </entry>
    <entry>
        <id>327477179</id>
        <title>[Chrome Perf Accessibility Sheriff]: 1 regressions in blink_perf.accessibility</title>
        <author>
            <name>ch...@appspot.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327477179"/>
        <updated>2024-02-29T18:38:05.016Z</updated>
        <summary>-</summary>
        <content type="html">All graphs for this regression group at 1266585:1266730:

  Internal (Googlers-only) Reports:
    - Chromium: https://chrome-perf.corp.goog/_/alertgroup?group_id=8b8523e2-ee74-455b-a652-3e089395b002

  (Legacy) Chromeperf Report: https://chromeperf.appspot.com/group_report?group_id=8b8523e2-ee74-455b-a652-3e089395b002

Top 1 regressions (out of 1, with 0 improvements) in this group:
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/insert-block-child-after-many-inline-children.html
       27.87%: 0.671 -&gt; 0.858 ms

Top 1 affected measurements in mac-m1_mini_2020-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/insert-block-child-after-many-inline-children.html
       27.87%: 0.671 -&gt; 0.858 ms

Regressions grouped by blink_perf.accessibility includes data from the following benchmarks with listed owners:
  blink_perf.accessibility: aleventhal@chromium.org
      

Commits in this range:
  Chromium Git Hash: https://chromium.googlesource.com/chromium/src/+log/736edb20e49fed21fb08700b8515dc7069c00092..e8dc2ba0eaf2207febd42ba2cb79514402a444c9
  Chromium Commit Position: https://crrev.com/1266584..1266730
  V8 Commit Position: https://chromium.googlesource.com/v8/v8/+log/ffbbc12861f55c50d80cf14e12f990becb352d10..b5c3d32f28d7af9f527a5eddca570c11e14303c9
  WebRTC Git Hash: https://webrtc.googlesource.com/src/+log/3afa1b2ce8295e11d4f18b52050c01434772fb26..3afa1b2ce8295e11d4f18b52050c01434772fb26</content>
    </entry>
    <entry>
        <id>327473316</id>
        <title>keplr</title>
        <author>
            <name>mo...@gmail.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327473316"/>
        <updated>2024-02-29T18:34:12.554Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : &lt;from chrome://version/&gt;
OS                   : &lt;OS version&gt;

What steps will reproduce the problem?


What is the expected result?


What happens instead?


You can help us a lot by creating a minimal, reproducible example (https://stackoverflow.com/help/minimal-reproducible-example), e.g. on glitch.com, and/or attaching a screenshot or recording of the issue!</content>
    </entry>
    <entry>
        <id>327630884</id>
        <title>Add "Show Tab groups" in bookmark bar context menu</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327630884"/>
        <updated>2024-02-29T18:24:23.408Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327630681</id>
        <title>Add Pin/Unpin action for group submenu and match style</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327630681"/>
        <updated>2024-02-29T18:23:44.014Z</updated>
        <summary>-</summary>
        <content type="html">Add Pin/Unpin action
Add "tabs" section</content>
    </entry>
    <entry>
        <id>327629679</id>
        <title>Add a command for "Create new group" used in the overflow menu</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327629679"/>
        <updated>2024-02-29T18:21:57.560Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327629119</id>
        <title>iOS - CA AADC Compliance test case coverage needed in Earl Grey or unit tests</title>
        <author>
            <name>me...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327629119"/>
        <updated>2024-02-29T18:20:30.835Z</updated>
        <summary>-</summary>
        <content type="html">For each of these iOS - CA AADC Compliance test cases, we ask that the component owner add the EG test case if needed or add unit test if needed.


Test Cases Row ID: B4 - Setting sign-in- for adults and 
                                   B5 - Bottom sheet sign-in

Link to test case of the feature 'iOS - CA AADC Compliance

https://docs.google.com/spreadsheets/d/1tQwWwedAxaTSrB9mp0Q5GJNcU6TnEMIa9W4SiWP4jrk/edit#gid=647249833'</content>
    </entry>
    <entry>
        <id>327629905</id>
        <title>Rewrite overflow menu to match tab restore style</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327629905"/>
        <updated>2024-02-29T18:19:54.417Z</updated>
        <summary>-</summary>
        <content type="html">New tab group
Match color dot + tab group title style
</content>
    </entry>
    <entry>
        <id>327629525</id>
        <title>Support sync for pinned state</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327629525"/>
        <updated>2024-02-29T18:18:59.762Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327629186</id>
        <title>Use the pinned state in SavedTabGroupBar and match style</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327629186"/>
        <updated>2024-02-29T18:16:40.827Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327629161</id>
        <title>Add the pinned state in saved tab group</title>
        <author>
            <name>yu...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327629161"/>
        <updated>2024-02-29T18:15:56.335Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version: (copy from chrome://version)
Lacros Version (if applicable): (copy from chrome://version)
OS: (e.g. Win10, MacOS 10.12, etc...)

What steps will reproduce the problem?
(1)
(2)
(3)

What is the expected result?


What happens instead?



Please use hotlists and text to provide additional information.

If this is a regression (i.e., worked before), please consider using the bisect tool (https://www.chromium.org/developers/bisect-builds-py) to help us identify the root cause and more rapidly triage the issue.

For graphics-related bugs, please copy/paste the contents of the about://gpu page at the end of this report.</content>
    </entry>
    <entry>
        <id>327605545</id>
        <title>BuiltInDnsClientEnabled policy documentation has wrong default for Linux</title>
        <author>
            <name>er...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327605545"/>
        <updated>2024-02-29T18:13:36.697Z</updated>
        <summary>-</summary>
        <content type="html">Just realized the policy documentation (https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled) for for the built-in resolver enable/disable never got updated once Linux was launched for enable-by-default.

&gt; If this policy is left unset, the built-in DNS client will be enabled by default on Microsoft® Windows®, macOS, Android (when neither Private DNS nor VPN are enabled) and Google ChromeOS.

Probably should work with whoever maintains that documentation to get it updated to list Linux.</content>
    </entry>
    <entry>
        <id>327501807</id>
        <title>Chrome crashes when creating large number of div nodes.</title>
        <author>
            <name>ji...@gmail.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327501807"/>
        <updated>2024-02-29T18:13:16.657Z</updated>
        <summary>-</summary>
        <content type="html"># Steps to reproduce the problem
1. Open a new tab in Chrome and its DevTool page
2. In Console of the DevTool page, running the following code

const list = document.createElement('ul');
document.body.appendChild(list);
for (let i = 0; i &lt; 500000; i++) {
  listItem = document.createElement('li');
  listItem.textContent = 'TEST';
  list.appendChild(listItem);

On different OSs and platforms, it takes different loop iteration account to crash Chrome tab, e.g., on my iMac, 500,000 is enough; on a windows 11 machine, 700,000 is enough. 

3. Observe that the tab is crashed with error code 5.

# Problem Description
It looks like Chrome crashes when excessive number of DOM nodes are being created. In my repro steps, it only takes about 500K &lt;li&gt;&lt;/li&gt; to crash Chrome. What's puzzling is that the DevTool's performance monitor is not showing any JS heap growth. Maybe it was crashing too fast before DevTool was able to grab the latest memory usage data from V8 engine. It does not look like 500K &lt;li&gt;&lt;/li&gt; nodes is going to take up all the 4GB JS heap though. Could someone explain to me that why V8 engine fails to handle this many number of DOM nodes? 

Note that the above repro steps is a simplified version of the issues my coworkers were running into. My company is building a software using CEF based off Chromium v118 where I have access to full debug symbols for libcef and where I can reproduce this crash. The crash stack trace was showing me that Chromium crashes from line 135 in file https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/cppgc/object-allocator.cc, as shown below.

Thread 0 Crashed:: CrRendererMain Dispatch queue: com.apple.main-thread
0   Chromium Embedded Framework            0x116f999d0 partition_alloc::internal::OnNoMemoryInternal(unsigned long) + 32 (oom.cc:58)
1   Chromium Embedded Framework            0x116f999e8 partition_alloc::TerminateBecauseOutOfMemory(unsigned long) + 12 (oom.cc:65)
2   Chromium Embedded Framework            0x116f99a04 partition_alloc::internal::OnNoMemory(unsigned long) + 28 (oom.cc:75)
3   Chromium Embedded Framework            0x11c018ce0 blink::ReportV8OOMError(char const*, v8::OOMDetails const&amp;) + 420 (v8_initializer.cc:752)
4   Chromium Embedded Framework            0x116219ee0 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) + 44 (api.cc:331)
5   Chromium Embedded Framework            0x116219e68 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) + 556 (api.cc:299)
6   Chromium Embedded Framework            0x1163abcc0 v8::internal::(anonymous namespace)::FatalOutOfMemoryHandlerImpl(std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt;&gt; const&amp;, v8::SourceLocation const&amp;, cppgc::internal::HeapBase*) + 44 (cpp-heap.cc:235)
7   Chromium Embedded Framework            0x116a6aa9c cppgc::internal::FatalOutOfMemoryHandler::operator()(std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt;&gt; const&amp;, v8::SourceLocation const&amp;) const + 48 (platform.cc:58)
8   Chromium Embedded Framework            0x116a67530 cppgc::internal::ObjectAllocator::OutOfLineAllocateImpl(cppgc::internal::NormalPageSpace&amp;, unsigned long, cppgc::internal::AlignVal, unsigned short) + 424 [inlined]

# Summary
Chrome crashes when creating large number of div nodes.

# Additional Data
Category: JavaScript \
Chrome Channel: Stable \
Regression: No</content>
    </entry>
    <entry>
        <id>327473167</id>
        <title>[Chrome Perf Accessibility Sheriff]: 34 regressions in blink_perf.accessibility</title>
        <author>
            <name>ch...@appspot.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327473167"/>
        <updated>2024-02-29T18:09:52.111Z</updated>
        <summary>-</summary>
        <content type="html">All graphs for this regression group at 1266919:1266929:

  Internal (Googlers-only) Reports:
    - Chromium: https://chrome-perf.corp.goog/_/alertgroup?group_id=ac1c7392-dac3-4186-aaaf-e6a5e155ac4d

  (Legacy) Chromeperf Report: https://chromeperf.appspot.com/group_report?group_id=ac1c7392-dac3-4186-aaaf-e6a5e155ac4d

Top 10 regressions (out of 21, with 0 improvements) in this group:
  - ChromiumPerf/mac-laptop_low_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       36.67%: 183.452 -&gt; 250.72 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/many-nodes-toggle-content-visibility-auto.html
       36.63%: 221.4035 -&gt; 302.496 ms
  - ChromiumPerf/mac-laptop_low_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       34.01%: 185.272 -&gt; 248.292 ms
  - ChromiumPerf/mac-laptop_high_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       31.62%: 153.82150000000001 -&gt; 202.4535 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       30.84%: 126.65299999999999 -&gt; 165.7115 ms
  - ChromiumPerf/mac-laptop_high_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.75%: 154.8725 -&gt; 200.9495 ms
  - ChromiumPerf/mac-laptop_low_end-perf/blink_perf.accessibility/ProcessDeferredAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.47%: 30.255499999999998 -&gt; 39.172 ms
  - ChromiumPerf/mac-laptop_high_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-wide-tree.html
       29.06%: 51.455 -&gt; 66.40700000000001 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       28.76%: 127.443 -&gt; 164.094 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-wide-tree.html
       28.50%: 61.569 -&gt; 79.1155 ms

Top 3 affected measurements in mac-laptop_high_end-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       31.62%: 153.82150000000001 -&gt; 202.4535 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.75%: 154.8725 -&gt; 200.9495 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-wide-tree.html
       29.06%: 51.455 -&gt; 66.40700000000001 ms


Top 3 affected measurements in mac-laptop_low_end-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       36.67%: 183.452 -&gt; 250.72 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       34.01%: 185.272 -&gt; 248.292 ms
  - blink_perf.accessibility/ProcessDeferredAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.47%: 30.255499999999998 -&gt; 39.172 ms


Top 3 affected measurements in mac-m1_mini_2020-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/many-nodes-toggle-content-visibility-auto.html
       36.63%: 221.4035 -&gt; 302.496 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       30.84%: 126.65299999999999 -&gt; 165.7115 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       28.76%: 127.443 -&gt; 164.094 ms

Regressions grouped by blink_perf.accessibility includes data from the following benchmarks with listed owners:
  blink_perf.accessibility: aleventhal@chromium.org
      

Commits in this range:
  Chromium Commit Position: https://crrev.com/1266917..1266937
  V8 Commit Position: https://chromium.googlesource.com/v8/v8/+log/7cdc7bbd6820203b5c168507cbcc3da7faafc98f..cec14cc8071b81df5c988b3061e7b723d512b65a
  WebRTC Git Hash: https://webrtc.googlesource.com/src/+log/e5c04cb080038ed1e5ca486a96fe5308fb73791b..16ac10d9f75cde959f00df062f544c49941882da</content>
    </entry>
    <entry>
        <id>327477177</id>
        <title>[Chrome Perf Accessibility Sheriff]: 21 regressions in blink_perf.accessibility</title>
        <author>
            <name>ch...@appspot.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327477177"/>
        <updated>2024-02-29T18:09:46.743Z</updated>
        <summary>-</summary>
        <content type="html">All graphs for this regression group at 1266919:1266929:

  Internal (Googlers-only) Reports:
    - Chromium: https://chrome-perf.corp.goog/_/alertgroup?group_id=ac1c7392-dac3-4186-aaaf-e6a5e155ac4d

  (Legacy) Chromeperf Report: https://chromeperf.appspot.com/group_report?group_id=ac1c7392-dac3-4186-aaaf-e6a5e155ac4d

Top 10 regressions (out of 21, with 0 improvements) in this group:
  - ChromiumPerf/mac-laptop_low_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       36.67%: 183.452 -&gt; 250.72 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/many-nodes-toggle-content-visibility-auto.html
       36.63%: 221.4035 -&gt; 302.496 ms
  - ChromiumPerf/mac-laptop_low_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       34.01%: 185.272 -&gt; 248.292 ms
  - ChromiumPerf/mac-laptop_high_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       31.62%: 153.82150000000001 -&gt; 202.4535 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       30.84%: 126.65299999999999 -&gt; 165.7115 ms
  - ChromiumPerf/mac-laptop_high_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.75%: 154.8725 -&gt; 200.9495 ms
  - ChromiumPerf/mac-laptop_low_end-perf/blink_perf.accessibility/ProcessDeferredAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.47%: 30.255499999999998 -&gt; 39.172 ms
  - ChromiumPerf/mac-laptop_high_end-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-wide-tree.html
       29.06%: 51.455 -&gt; 66.40700000000001 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       28.76%: 127.443 -&gt; 164.094 ms
  - ChromiumPerf/mac-m1_mini_2020-perf/blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-wide-tree.html
       28.50%: 61.569 -&gt; 79.1155 ms

Top 3 affected measurements in mac-laptop_high_end-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       31.62%: 153.82150000000001 -&gt; 202.4535 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.75%: 154.8725 -&gt; 200.9495 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-wide-tree.html
       29.06%: 51.455 -&gt; 66.40700000000001 ms


Top 3 affected measurements in mac-laptop_low_end-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       36.67%: 183.452 -&gt; 250.72 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       34.01%: 185.272 -&gt; 248.292 ms
  - blink_perf.accessibility/ProcessDeferredAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       29.47%: 30.255499999999998 -&gt; 39.172 ms


Top 3 affected measurements in mac-m1_mini_2020-perf:
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/many-nodes-toggle-content-visibility-auto.html
       36.63%: 221.4035 -&gt; 302.496 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-deep-tree.html
       30.84%: 126.65299999999999 -&gt; 165.7115 ms
  - blink_perf.accessibility/BrowserAccessibilityManager::OnAccessibilityEvents_sum/unassignable-slots-focusable-containers.html
       28.76%: 127.443 -&gt; 164.094 ms

Regressions grouped by blink_perf.accessibility includes data from the following benchmarks with listed owners:
  blink_perf.accessibility: aleventhal@chromium.org
      

Commits in this range:
  Chromium Commit Position: https://crrev.com/1266917..1266937
  V8 Commit Position: https://chromium.googlesource.com/v8/v8/+log/7cdc7bbd6820203b5c168507cbcc3da7faafc98f..cec14cc8071b81df5c988b3061e7b723d512b65a
  WebRTC Git Hash: https://webrtc.googlesource.com/src/+log/e5c04cb080038ed1e5ca486a96fe5308fb73791b..16ac10d9f75cde959f00df062f544c49941882da</content>
    </entry>
    <entry>
        <id>327499438</id>
        <title>risk to humanity findings and research confirms humans are subjects of animal testing's in clinical human patient trails. Fuck what is wrong with the world and eon musk is involved in it</title>
        <author>
            <name>sa...@enterprize13.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327499438"/>
        <updated>2024-02-29T18:02:32.155Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : &lt;from chrome://version/&gt;
OS                   : &lt;OS version&gt;

What steps will reproduce the problem?


What is the expected result?


What happens instead?

https://www.reuters.com/business/healthcare-pharmaceuticals/fda-finds-problems-animal-lab-run-by-musks-brain-implant-company-2024-02-29/

You can help us a lot by creating a minimal, reproducible example (https://stackoverflow.com/help/minimal-reproducible-example), e.g. on glitch.com, and/or attaching a screenshot or recording of the issue!</content>
    </entry>
    <entry>
        <id>327475255</id>
        <title>SVG stop color animation stopped working</title>
        <author>
            <name>gg...@gmail.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327475255"/>
        <updated>2024-02-29T17:58:08.665Z</updated>
        <summary>-</summary>
        <content type="html"># Steps to reproduce the problem
1. Create an SVG linear gradient with a stop color
2. Add &lt;animate&gt; to the stop color
3. Use the created gradient on an SVG rect element 

# Problem Description
Consider the following example:
```
&lt;html&gt;
    &lt;svg width="600" height="800" viewBox="0 0 600 800"&gt;
        &lt;defs&gt;
            &lt;linearGradient id="gradient_bg" x1="0%" x2="100%" y1="0%" y2="0%"&gt;
                &lt;stop offset="0" stop-color="#FF668A"&gt;
                    &lt;animate attributeName="stop-color" values="#FF668A;#FFE112;#FF1A4F;#FFFF80;#FF668A" dur="0.4s" repeatCount="indefinite"&gt;
                    &lt;/animate&gt;
                &lt;/stop&gt;
                &lt;stop offset="1" stop-color="#FFE112"&gt;
                    &lt;animate attributeName="stop-color" values="#FFE112;#FF668A;#FFFF80;#FF1A4F;#FFE112" dur="0.4s" repeatCount="indefinite"&gt;
                    &lt;/animate&gt;
                &lt;/stop&gt;
            &lt;/linearGradient&gt;
        &lt;/defs&gt;
        &lt;rect width="100%" height="100%" x="0" y="0" fill="url(#gradient_bg)"&gt;
        &lt;/rect&gt;
    &lt;/svg&gt;
&lt;/html&gt;
```
The stop-color animation works as expected on other browsers but in Chrome/Chromium it produces very slow and stuttering animation. The issue is consistent on different operating systems. 

# Summary
SVG stop color animation stopped working

# Additional Data
Category: JavaScript \
Chrome Channel: Stable \
Regression: Yes</content>
    </entry>
    <entry>
        <id>327625944</id>
        <title>Remove duplicate "add bookmark" button</title>
        <author>
            <name>wy...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/327625944"/>
        <updated>2024-02-29T17:55:51.152Z</updated>
        <summary>-</summary>
        <content type="html"></content>
    </entry>
    <entry>
        <id>327483142</id>
        <title>Linux Chrome avatar menu's turn on sync button is not in proper color contrast </title>
        <author>
            <name>su...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/327483142"/>
        <updated>2024-02-29T17:53:40.336Z</updated>
        <summary>-</summary>
        <content type="html">Chrome version : 124.0.6329.0 (Official Build) dev (64-bit)
Revision: 8f83baf3936696a32b20875d9436b4829c44765b-refs/branch-heads/6329@{#1}

OS : Linux

Preconditions:
Fresh install chrome on Linux system

Steps to reproduce:
1. launch chrome,
2. Click on avatar button and
3. Observe turn on sync button

Actual Result :
Linux Chrome avatar menu's turn on sync button is not in proper color contrast 

Expected Result :
Linux Chrome avatar menu's turn on sync button should be properly color contrasting

Please refer to the screencast/screenshot attached below:

Actual Result:
Refer screencast/screenshot

Note :
1. This is a Linux exclusive issue

Thank You..!!!!</content>
    </entry>
</feed>