<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://negibokken.github.io/feeds/chromium_issue_tracker/atom.xml</id>
    <title>Chromium issue tracker feed</title>
    <link href="https://negibokken.github.io/feeds/intent_to_ship/atom.xml" rel="self"/>
    <updated>2024-02-21T00:19:28.794Z</updated>
    <entry>
        <id>326137106</id>
        <title>OpenDevToolsWindowSync is slow on Linux debug cause tests to be flaky</title>
        <author>
            <name>ze...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326137106"/>
        <updated>2024-02-21T00:19:28.794Z</updated>
        <summary>-</summary>
        <content type="html">Here are examples of some test failures due to waiting on OpenDevToolsWindowSync.
b/41495909
b/40172724
b/41497351</content>
    </entry>
    <entry>
        <id>326134039</id>
        <title>Tankyou</title>
        <author>
            <name>ma...@gmail.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326134039"/>
        <updated>2024-02-21T00:00:48.151Z</updated>
        <summary>-</summary>
        <content type="html">Tankyou
</content>
    </entry>
    <entry>
        <id>326116366</id>
        <title>Fix Fluent scrollbar web test anti aliasing issues</title>
        <author>
            <name>ga...@microsoft.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326116366"/>
        <updated>2024-02-20T23:56:46.285Z</updated>
        <summary>-</summary>
        <content type="html">Composited scrollbars and non composited scrollbars have differences when drawing pixels with an alpha value that is not 1. (see https://issues.chromium.org/issues/41490747 ). This causes tests that compare expectations vs results via a -ref html to sometimes have different results because one is composited, and the other is not, and the anti aliasing pixels (which have an alpha value) end up having different values (see examples at https://ci.chromium.org/ui/p/chromium/builders/try/win-rel/485587/test-results?sortby=&amp;groupby=&amp;q=wpt ).
After experimenting with removing the antialiasing all together, the same issue arose with the rounding of the corners being drawn differently between composited and non-composited scrollbars (see attached image).

After days trying to debug and consult with people knowledgeable on graphics related code, the proposed solution is to avoid anti aliasing and the rounding in the thumb entirely for web test expectations. This will be done via a new extraparams field that indicates if we are in a web test, and if true then the thumb will be a rectangle.

Anti aliasing has caused issues in the past (example: crrev.com/1b47829f37eee35a4054e080686686619f5488ae) even when comparing pixel tests due to different platforms implementing it in slightly different manners, so I believe that getting rid of it is a positive step towards maintainability of the web test suite.
</content>
    </entry>
    <entry>
        <id>326116365</id>
        <title>win-40-g580 in a bad state</title>
        <author>
            <name>bs...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326116365"/>
        <updated>2024-02-20T23:56:13.464Z</updated>
        <summary>-</summary>
        <content type="html">[win-40-g580](https://chromium-swarm.appspot.com/bot?id=win-40-g580) appears to be in a bad state, where all `trace_test` suite run on it fail due to not getting back any valid frame statistics in direct composition tests.

We'll be upgrading the stable fleet to a newer OS and driver version in the near future, so I'll just stop the bot in swarming and hold onto this bug until the upgrade is complete.</content>
    </entry>
    <entry>
        <id>326116364</id>
        <title>Cleanup chrome-refresh-2023 flag from WebUI</title>
        <author>
            <name>jo...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326116364"/>
        <updated>2024-02-20T23:56:07.347Z</updated>
        <summary>-</summary>
        <content type="html">General tracking bug for cleaning up CR2023 flag and removing non-CR2023 code for WebUI</content>
    </entry>
    <entry>
        <id>326133812</id>
        <title>updater: disable logging to the debugger console on Windows</title>
        <author>
            <name>so...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326133812"/>
        <updated>2024-02-20T23:50:07.578Z</updated>
        <summary>-</summary>
        <content type="html">Logging to the debugger console introduces some systemic instability such as:

```
0x77b12935	(ntdll.dll + 0x00072935)		KiUserExceptionDispatcher
0x766aab31	(KERNELBASE.dll + 0x0011ab31)		RaiseException
0x76680845	(KERNELBASE.dll + 0x000f0845)		OutputDebugStringA
0x0108651e	(updater.exe -logging.cc:757)		logging::LogMessage::Flush()
0x010862a1	(updater.exe -logging.cc:695)		logging::LogMessage::~LogMessage()
0x00ff65f1	(updater.exe -updater.cc:309)		updater::UpdaterMain(int,char const * const *)
```

While is it useful to have this destination for the log, eliminating crashes when possible is also a goal.</content>
    </entry>
    <entry>
        <id>326131114</id>
        <title>PDF + Blink a11y stabilization</title>
        <author>
            <name>dt...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326131114"/>
        <updated>2024-02-20T23:32:00.605Z</updated>
        <summary>-</summary>
        <content type="html">Tracks work outlined in
go/chrome-pdf-a11y-stabilization</content>
    </entry>
    <entry>
        <id>326116362</id>
        <title>Land a 7-day version of the SafeBrowsing.Enhanced.ProtegoRequestSentInLast24Hours2 histogram</title>
        <author>
            <name>ja...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326116362"/>
        <updated>2024-02-20T23:18:43.576Z</updated>
        <summary>-</summary>
        <content type="html">Let's land a 7-day version of the SafeBrowsing.Enhanced.ProtegoRequestSentInLast24Hours2 histogram so we can see if that helps bring some clarity to why there is are a large number of Chrome enhanced protection users that are not logging any protego pings.</content>
    </entry>
    <entry>
        <id>326110055</id>
        <title>Grey screen after focus mode</title>
        <author>
            <name>ga...@gmail.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326110055"/>
        <updated>2024-02-20T22:40:33.084Z</updated>
        <summary>-</summary>
        <content type="html"># Steps to reproduce the problem
1. Focus Mode 
2. Selected Chrome and YouTube 
3. Grey screen glitch on the apps

# Problem Description
Grey screen after focus mode
The apps that I had on focus mode turned grey and flicker once when I open them. I was able to fix it by reinstalling them. I can't uninstall YouTube or chrome though because it's a system app and now it's just grey.

I feel like I'm owned a new phone if you can't fix it, this is preposterous.

# Additional Comments
Someone please help, why even come up with this if it's not gonna work, ridiculous, should've been tested. 

I'll take legal action if I can.

# Summary
Grey screen after focus mode

# Custom Questions
#### Please select a label to classify your issue:
Type-Bug - Software not working correctly

# Additional Data
Category: Other \
Chrome Channel: Not sure \
Regression: N/A</content>
    </entry>
    <entry>
        <id>326122114</id>
        <title>virtual/plz-dedicated-worker-disabled/http/tests/devtools/indexeddb/live-update-indexeddb-list.js test is flaky</title>
        <author>
            <name>sa...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326122114"/>
        <updated>2024-02-20T22:28:27.435Z</updated>
        <summary>-</summary>
        <content type="html">virtual/plz-dedicated-worker-disabled/http/tests/devtools/indexeddb/live-update-indexeddb-list.js

Timeout Failure on Linux Tests (dbg)(1) builder

Test History Link:
https://ci.chromium.org/ui/test/chromium%3Aci/ninja%3A%2F%2F%3Ablink_web_tests%2Fvirtual%2Fplz-dedicated-worker-disabled%2Fhttp%2Ftests%2Fdevtools%2Findexeddb%2Flive-update-indexeddb-list.js?q=VHASH%3A3cc2a4548647ce0d

Dashbaord:
https://data.corp.google.com/sites/chrome_generic_flakiness_dashboard_datasite/top_flakes/?f=test_id:eq:ninja:%2F%2F:blink_web_tests%2Fvirtual%2Fplz-dedicated-worker-disabled%2Fhttp%2Ftests%2Fdevtools%2Findexeddb%2Flive-update-indexeddb-list.js&amp;f=realm:in:(null)&amp;f=variant_test_suite:in:blink_web_tests&amp;can=2

and average 70.83% flaky rate in runs mostly on Linux builders</content>
    </entry>
    <entry>
        <id>326116359</id>
        <title>Optimize LevelDB block cache</title>
        <author>
            <name>es...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326116359"/>
        <updated>2024-02-20T22:27:44.850Z</updated>
        <summary>-</summary>
        <content type="html">Across all Web APIs (IndexedDB, dom storage, notifications) LevelDB is given one shared cache for data (blocks).

Links:
* [Some LDB docs](https://source.chromium.org/chromium/chromium/src/+/main:third_party/leveldatabase/src/include/leveldb/options.h;l=90-95;drc=f4a00cc248dd2dc8ec8759fb51620d47b5114090)
* [Reasoning for shared cache](https://source.chromium.org/chromium/chromium/src/+/main:third_party/leveldatabase/leveldb_chrome.cc;l=291-295;drc=f4a00cc248dd2dc8ec8759fb51620d47b5114090)
* [relevant change 1](https://chromium-review.googlesource.com/c/chromium/src/+/567583)
* [relevant change 2](https://chromium-review.googlesource.com/c/chromium/src/+/599014)

8MB was chosen as the cache size, aside from low-end devices where it's shared with the browser cache and is 1MB. LDB defaults to 8MB as the cache size, so I assume this was the source of the number used for Chromium, but I don't see any further (explicit) justification.

* 8MB seems like an incredibly small amount of memory, so **if** it's useful to increase the size of the cache, we should be OK with upping it a bit.
  * alternatively, we can give each storage partition (or bucket?) its own 8MB cache.
* DOM storage implements its own [in-memory cache](https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/storage/cached_storage_area.h;l=204;drc=d2b5c17eff35da6ebff8ba20c99688b87e1bc752), so it's not necessary to increase the LDB cache size for it --- in fact the cache is probably never even read. We probably should give DOM Storage a separate cache from IDB so it doesn't thrash the IDB cache, which is actually used.
* The cache is shared across threads, so synchronization is a potential performance bottleneck and it would thus diminish the effectiveness of sharding IDB across threads: issue 40279485. </content>
    </entry>
    <entry>
        <id>326122296</id>
        <title>WebGL tests flakily hang on Windows arm64 devices</title>
        <author>
            <name>bs...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326122296"/>
        <updated>2024-02-20T22:21:57.701Z</updated>
        <summary>-</summary>
        <content type="html">The GPU Windows arm64 builder is relatively stable at this point, but there are occasional cases where WebGL conformance test steps are marked as failing without any specific failed tests. Looking into this, the cause is that shards are flakily hanging relatively early into testing until they hit the 30 minute shard timeout.

This is most common in WebGL 2 tests, but this appears to be a general WebGL issue that's just more likely to be hit in WebGL 2 due to the larger number of shards. There are instances of this hang occurring in the WebGL 1 tests as well.

[Sample failed build](https://ci.chromium.org/ui/p/chromium/builders/ci/Win11%20FYI%20arm64%20Release%20(Qualcomm%20Adreno%20690)/423/overview)

Which shards fail as well as the device used appear to be random, so I don't think this is a case of a misconfigured device or a specific bad test.</content>
    </entry>
    <entry>
        <id>326091473</id>
        <title>[FedCM] Implement OT infra for the button flow</title>
        <author>
            <name>yi...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326091473"/>
        <updated>2024-02-20T22:21:26.134Z</updated>
        <summary>-</summary>
        <content type="html">For "button mode", we need to update the browser side flag to "enabled" and update runtime enabled features to include OT configs.
For "use other account", there are two options:
1. Add a new entry in runtime enabled features and check the feature status on the browser side similar to [1].
2. Bundle the feature with "button mode". i.e. enable the feature iff "button mode" is enabled

The key difference is whether to support "use other accounts" in the "widget flow". Given that there's no clear demand for this, we could punt it until we receive feedback that asks for it. API wise we can stick with the current syntax in the config file and only parse the one for "button". e.g.
```
  "modes: {
    "button": {  // this will be parsed
      "supports_use_other_account": true|false,
    },
    "widget": { // this will be ignored
      "supports_use_other_account": true|false,
    }
  }
```
[1] https://chromium-review.googlesource.com/c/chromium/src/+/4823290/4/content/browser/webid/webid_utils.cc#244</content>
    </entry>
    <entry>
        <id>326101781</id>
        <title>1</title>
        <author>
            <name>ja...@gmail.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326101781"/>
        <updated>2024-02-20T22:09:04.384Z</updated>
        <summary>-</summary>
        <content type="html"># Steps to reproduce the problem
1. 
2. 
3. W

# Problem Description
1

# Summary
1

# Additional Data
Category: Network / Downloading \
Chrome Channel: Not sure \
Regression: No</content>
    </entry>
    <entry>
        <id>326110052</id>
        <title>font</title>
        <author>
            <name>sj...@stkate.edu</name>
        </author>
        <link href="https://issues.chromium.org/issues/326110052"/>
        <updated>2024-02-20T21:37:45.257Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : &lt;from chrome://version/&gt;
OS                   : &lt;OS version&gt;

What steps will reproduce the problem?
I have changed the font in my regular settings in google. And now am looking here. The font says 'Sans Serif', but in the screen shot you will see it is an irregular font. This is only true for websites like this, the fonts are normal on Google and other places. It drives me nuts and I can't figure out where to change settings to fix the font so it's readable.

What is the expected result?


What happens instead?


You can help us a lot by creating a minimal, reproducible example (https://stackoverflow.com/help/minimal-reproducible-example), e.g. on glitch.com, and/or attaching a screenshot or recording of the issue!</content>
    </entry>
    <entry>
        <id>326112830</id>
        <title>Followup on yaqs/2430700251129053184</title>
        <author>
            <name>eh...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326112830"/>
        <updated>2024-02-20T21:30:22.874Z</updated>
        <summary>-</summary>
        <content type="html">I saw this is a public component, lmk if this is the right place to send this issue. Will just leave yaqs link for now in case I got the access controls wrong. </content>
    </entry>
    <entry>
        <id>326114259</id>
        <title>[Test Reviver] Passing in selected builders: ninja://chrome/android:chrome_public_test_apk/org.chromium.chrome.browser.browserservices.TrustedWebActivityTest#testToolbarVisibleCertificateError </title>
        <author>
            <name>ch...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326114259"/>
        <updated>2024-02-20T21:28:19.050Z</updated>
        <summary>-</summary>
        <content type="html">Based on following past run history:
ninja://chrome/android:chrome_public_test_apk/org.chromium.chrome.browser.browserservices.TrustedWebActivityTest#testToolbarVisibleCertificateError would pass in these builders if reenabled.

Builder: android-12l-x64-dbg-tests(CI)
History: P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P 

Builder: android-oreo-x86-rel(CI)
History: P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P 

Builder: android-pie-arm64-rel(CI)
History: P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P 

Builder: android-pie-x86-rel(CI)
History: P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P P 

Test History View:
REVIVER history:
https://ci.chromium.org/ui/test/chromium%3Areviver/ninja%3A%2F%2Fchrome%2Fandroid%3Achrome_public_test_apk%2Forg.chromium.chrome.browser.browserservices.TrustedWebActivityTest%23testToolbarVisibleCertificateError
CI history:
https://ci.chromium.org/ui/test/chromium%3Aci/ninja%3A%2F%2Fchrome%2Fandroid%3Achrome_public_test_apk%2Forg.chromium.chrome.browser.browserservices.TrustedWebActivityTest%23testToolbarVisibleCertificateError
TRY history:
https://ci.chromium.org/ui/test/chromium%3Atry/ninja%3A%2F%2Fchrome%2Fandroid%3Achrome_public_test_apk%2Forg.chromium.chrome.browser.browserservices.TrustedWebActivityTest%23testToolbarVisibleCertificateError

==========================================
* We are limited to running the disabled test in only above reviver builders, but not all testing variants. If this test was disabled due to failing in one of the builders above, it can be reenabled. If it was failing due to other builders, the bug should be closed as WontFix.
==========================================
</content>
    </entry>
    <entry>
        <id>326113881</id>
        <title>[Test Reviver] Consistently failing: ninja://chrome/android:chrome_public_test_apk/org.chromium.chrome.browser.customtabs.CustomTabActivityAppMenuTest#testCustomMenuEntry </title>
        <author>
            <name>ch...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326113881"/>
        <updated>2024-02-20T21:28:16.584Z</updated>
        <summary>-</summary>
        <content type="html">Based on following past run history:
ninja://chrome/android:chrome_public_test_apk/org.chromium.chrome.browser.customtabs.CustomTabActivityAppMenuTest#testCustomMenuEntry is consistently failing in the builders below, and the failure should be reliably reproducible in those builders. Please decide what action to take for this test:
1. Reduce the scope of the test if it can still cover bugs adequately (e.g. making an integration test into a unit test)
2. Delete the test if not useful or feasible to fix
3. Fix the test

Builder: android-12l-x64-dbg-tests(CI)
History: F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F 

Builder: android-oreo-x86-rel(CI)
History: F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F 

Builder: android-pie-arm64-rel(CI)
History: F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F 

Builder: android-pie-x86-rel(CI)
History: F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F 

Test History View:
REVIVER history:
https://ci.chromium.org/ui/test/chromium%3Areviver/ninja%3A%2F%2Fchrome%2Fandroid%3Achrome_public_test_apk%2Forg.chromium.chrome.browser.customtabs.CustomTabActivityAppMenuTest%23testCustomMenuEntry
CI history:
https://ci.chromium.org/ui/test/chromium%3Aci/ninja%3A%2F%2Fchrome%2Fandroid%3Achrome_public_test_apk%2Forg.chromium.chrome.browser.customtabs.CustomTabActivityAppMenuTest%23testCustomMenuEntry
TRY history:
https://ci.chromium.org/ui/test/chromium%3Atry/ninja%3A%2F%2Fchrome%2Fandroid%3Achrome_public_test_apk%2Forg.chromium.chrome.browser.customtabs.CustomTabActivityAppMenuTest%23testCustomMenuEntry

</content>
    </entry>
    <entry>
        <id>326110639</id>
        <title>Converting from java Map to std::map</title>
        <author>
            <name>mh...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326110639"/>
        <updated>2024-02-20T21:23:09.816Z</updated>
        <summary>-</summary>
        <content type="html">Sending maps to cpp or back is pretty complicated, need to convert to two arrays and then back again on the other side. Maybe we can add support for this in @JniType. 

The general idea would be to send an array of keys and an array of values where the order sets the mapping.

There are a few issues:

- The generator/converter needs to know the types key and value inside the map. Unfortunately we remove generics before parsing the file and we would have to go back to parsing generics and fixing all our parsing regexes to support generics.

- If you do a helper function rather than relying on @JniType and generated code, you cant return two arrays from said helper function. Must have a custom return type/class/container with both arrays (you it works fine in the other direction though).</content>
    </entry>
    <entry>
        <id>326110480</id>
        <title>[V8 Perf Sheriff]: 1 regressions in v8.runtime_stats.top_25</title>
        <author>
            <name>ch...@appspot.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326110480"/>
        <updated>2024-02-20T21:07:09.681Z</updated>
        <summary>-</summary>
        <content type="html">All graphs for this regression group at 1262133:1262148:

  Internal (Googlers-only) Reports:
    - Chromium: https://chrome-perf.corp.goog/_/alertgroup?group_id=9ce214df-e904-4069-a00b-674e8bb4faff

  (Legacy) Chromeperf Report: https://chromeperf.appspot.com/group_report?group_id=9ce214df-e904-4069-a00b-674e8bb4faff

Top 1 regressions (out of 1, with 0 improvements) in this group:
  - ChromiumPerf/win-10_laptop_low_end-perf/v8.runtime_stats.top_25/Compile:count_avg/cold
       45.12%: 11428.25 -&gt; 16584.8 

Top 1 affected measurements in win-10_laptop_low_end-perf:
  - v8.runtime_stats.top_25/Compile:count_avg/cold
       45.12%: 11428.25 -&gt; 16584.8 

Regressions grouped by v8.runtime_stats.top_25 includes data from the following benchmarks with listed owners:
  v8.runtime_stats.top_25: 
      None

Commits in this range:</content>
    </entry>
    <entry>
        <id>326109113</id>
        <title>Enable crashreporter -u for Chromium Android Emulators</title>
        <author>
            <name>ri...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326109113"/>
        <updated>2024-02-20T21:06:07.060Z</updated>
        <summary>-</summary>
        <content type="html">We have been seeing intermittent crashing of the Android Emulators in the Flutter CI and have create a bug for that here: https://b.corp.google.com/issues/319321211#comment8. In order to provide the needed information for that bug we need to enable crash reporting for the emulator.

We also see that in our CI output that crashdata might be available:
```
Storing crashdata in: , detection is enabled for process: 167102
```

https://logs.chromium.org/logs/flutter/buildbucket/cr-buildbucket/8755596166145235873/+/u/start_avd__4_/avd_setup/avd_setup.sh/stdout</content>
    </entry>
    <entry>
        <id>326110076</id>
        <title>[Blink Bindings Perf Regressions]: 1 regressions in blink_perf.bindings</title>
        <author>
            <name>ch...@appspot.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326110076"/>
        <updated>2024-02-20T21:04:52.672Z</updated>
        <summary>-</summary>
        <content type="html">All graphs for this regression group at 1262641:1262657:

  Internal (Googlers-only) Reports:
    - Chromium: https://chrome-perf.corp.goog/_/alertgroup?group_id=01c40f0f-fc4c-42d0-a767-a7d3fb305864

  (Legacy) Chromeperf Report: https://chromeperf.appspot.com/group_report?group_id=01c40f0f-fc4c-42d0-a767-a7d3fb305864

Top 1 regressions (out of 1, with 0 improvements) in this group:
  - ChromiumPerf/android-pixel4_webview-perf/blink_perf.bindings/insert-before/insert-before.html
       10.64%: 28.0442 -&gt; 25.060001 

Top 1 affected measurements in android-pixel4_webview-perf:
  - blink_perf.bindings/insert-before/insert-before.html
       10.64%: 28.0442 -&gt; 25.060001 

Regressions grouped by blink_perf.bindings includes data from the following benchmarks with listed owners:
  blink_perf.bindings: 
      None

Commits in this range:</content>
    </entry>
    <entry>
        <id>326104637</id>
        <title>run_tests.py calls UpdateExecutableIfNeeded twice</title>
        <author>
            <name>wn...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326104637"/>
        <updated>2024-02-20T20:41:51.922Z</updated>
        <summary>-</summary>
        <content type="html">third_party/catapult/telemetry/telemetry/testing/run_tests.py calls `chosen_browser.UpdateExecutableIfNeeded` twice.

1. https://source.chromium.org/chromium/chromium/src/+/main:third_party/catapult/telemetry/telemetry/testing/run_tests.py;l=115;drc=de8aae6f6d535802f1a6bb48642e50dfee65bcc5

2. https://source.chromium.org/chromium/chromium/src/+/main:third_party/catapult/telemetry/telemetry/testing/run_tests.py;l=161;drc=de8aae6f6d535802f1a6bb48642e50dfee65bcc5

Either `possible_browser` should be returned and re-used or platform &amp; other info should be passed along instead of re-fetched. On Android this is quite expensive since there is no easy way of checking if the currently installed app is the same as the apk, thus the apk just gets installed multiple times over the network onto the device, overwriting the previously installed app each time, adding to test time and verbose logging.</content>
    </entry>
    <entry>
        <id>326104853</id>
        <title>MagicStack feature cleanup</title>
        <author>
            <name>th...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326104853"/>
        <updated>2024-02-20T20:34:52.183Z</updated>
        <summary>-</summary>
        <content type="html">Tracks cleanup work needed post MagicStack launch in the codebase</content>
    </entry>
    <entry>
        <id>325936444</id>
        <title>Rename WebNN's IPC classes from Mojo</title>
        <author>
            <name>br...@intel.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325936444"/>
        <updated>2024-02-20T20:15:51.789Z</updated>
        <summary>-</summary>
        <content type="html">Per Alex's feedback here [1], the use of "Mojo" suffix is confusing to new WebNN contributors. 
[1] https://chromium-review.googlesource.com/c/chromium/src/+/5173676/comment/a87b8f81_de93ad0b/</content>
    </entry>
    <entry>
        <id>326101778</id>
        <title>JSON Error </title>
        <author>
            <name>di...@gosucpa.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326101778"/>
        <updated>2024-02-20T20:12:21.310Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : 121.0.6167.185
OS                   : Windows 10 Pro 

What steps will reproduce the problem?
Logging into ADP -&gt; Choosing Service Requests (Section in website allowed to see inquires to ADP representatives)

What is the expected result?
Expected to open page of open requests that can be clicked on and additional comments may be added to communicate back and forth with representatives.

What happens instead?
Red boxed error shows with bottom just loading continiously (even after deleting cahe and data). Box contains: Unexpected token '&lt;', "&lt;!doctype "...is not valid JSON
Attempted to try other browers and devices and same issues. On firefox it states: JSON.parse: unexpected character at line 1 column 1 of the JSON data

You can help us a lot by creating a minimal, reproducible example (https://stackoverflow.com/help/minimal-reproducible-example), e.g. on glitch.com, and/or attaching a screenshot or recording of the issue!</content>
    </entry>
    <entry>
        <id>326099073</id>
        <title>Clean up special testing logic for kForceThirdPartyCookieBlocking (if necessary)</title>
        <author>
            <name>am...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326099073"/>
        <updated>2024-02-20T20:05:04.131Z</updated>
        <summary>-</summary>
        <content type="html">Follow-up cleanup tasks for https://chromium-review.googlesource.com/c/chromium/src/+/5310537.

Audit checks of kForceThirdPartyCookieBlocking. Where do we need special logic for force-testing, and where should we instead be checking for 3PCD / tracking-protection onboarding to include the prod behavior?

Feel free to close if this is unnecessary.</content>
    </entry>
    <entry>
        <id>326099064</id>
        <title>Sometimes vTPMs fails to create ECDSA P-256 key</title>
        <author>
            <name>kr...@google.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326099064"/>
        <updated>2024-02-20T20:01:48.293Z</updated>
        <summary>-</summary>
        <content type="html">Before creating an unexportable key, it is checked if the required alg is supported. Sometimes even if it is claimed that the algo is supported it will fail with TPM_E_PCP_INTERNAL_ERROR during https://source.chromium.org/chromium/chromium/src/+/main:crypto/unexportable_key_win.cc;l=112;drc=f4a00cc248dd2dc8ec8759fb51620d47b5114090;bpv=0;bpt=1.

It looks like this is always on specific virtual hardware.

As this affects under .1% of devices right now we just ignore it. I can see a few options of how to better handle this, and we need to do something as it happens on new trybots.

1. Handle fail key gracefully, for now that mostly means expect it can happen in tests.
2. Have a blocklist of known bad TPMs and disable ECDSA keys for these. RSA keys will work.
3. Create a config file, and if this fails once on this device disable ECDSA keys for this device in the future.
4. Always use RSA keys for everyone.
</content>
    </entry>
    <entry>
        <id>326044884</id>
        <title>this keeps popping up on my screen</title>
        <author>
            <name>gh...@kaolaz.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/326044884"/>
        <updated>2024-02-20T19:50:47.932Z</updated>
        <summary>-</summary>
        <content type="html">Chrome Version       : &lt;from chrome://version/&gt;
OS                   : &lt;OS version&gt;

What steps will reproduce the problem?


What is the expected result?


What happens instead?


You can help us a lot by creating a minimal, reproducible example (https://stackoverflow.com/help/minimal-reproducible-example), e.g. on glitch.com, and/or attaching a screenshot or recording of the issue!</content>
    </entry>
    <entry>
        <id>325992828</id>
        <title>Re-enable ACG for true jitless processes</title>
        <author>
            <name>el...@chromium.org</name>
        </author>
        <link href="https://issues.chromium.org/issues/325992828"/>
        <updated>2024-02-20T19:34:44.376Z</updated>
        <summary>-</summary>
        <content type="html">As part of the mitigation for https://issues.chromium.org/issues/325974501, I'm going to change the meaning of RenderProcessHostImpl::IsJitDisabled() to be "are v8 optimizations disabled?", which means that a) all the involved function/method names are now at best misleading, and b) ACG is disabled for processes for which it used to be enabled (namely renderers that are subject to this policy).</content>
    </entry>
    <entry>
        <id>325992267</id>
        <title>Flag expired : webui-tab-strip-context-menu-after-tap is expired in M116</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325992267"/>
        <updated>2024-02-20T19:09:41.106Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "webui-tab-strip-context-menu-after-tap" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M116 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M116 branch you're all set; if you do it after the M116 branch you'll need to merge that CL to the M116 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325983969</id>
        <title>Flag expired : webui-tab-strip is expired in M116</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325983969"/>
        <updated>2024-02-20T19:09:39.834Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "webui-tab-strip" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M116 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M116 branch you're all set; if you do it after the M116 branch you'll need to merge that CL to the M116 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325834723</id>
        <title>Flag expired : web-sql-access is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325834723"/>
        <updated>2024-02-20T19:09:38.749Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "web-sql-access" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>326086050</id>
        <title>Flag expired : web-authentication-android-credential-management is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326086050"/>
        <updated>2024-02-20T19:09:36.994Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "web-authentication-android-credential-management" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325992266</id>
        <title>Flag expired : use-multi-plane-format-for-software-video is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325992266"/>
        <updated>2024-02-20T19:09:32.735Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "use-multi-plane-format-for-software-video" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325983968</id>
        <title>Flag expired : use-multi-plane-format-for-hardware-video is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325983968"/>
        <updated>2024-02-20T19:09:31.535Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "use-multi-plane-format-for-hardware-video" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325984047</id>
        <title>Flag expired : upload-office-to-cloud is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325984047"/>
        <updated>2024-02-20T19:09:30.235Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "upload-office-to-cloud" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325983967</id>
        <title>Flag expired : third-party-storage-partitioning is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325983967"/>
        <updated>2024-02-20T19:09:27.305Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "third-party-storage-partitioning" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>326069355</id>
        <title>Flag expired : swap-backquote-keys-in-iso-keyboard is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326069355"/>
        <updated>2024-02-20T19:09:23.846Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "swap-backquote-keys-in-iso-keyboard" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>326069354</id>
        <title>Flag expired : skip-undecryptable-passwords is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326069354"/>
        <updated>2024-02-20T19:09:21.490Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "skip-undecryptable-passwords" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325984046</id>
        <title>Flag expired : search-suggestion-for-prerender2 is expired in M122</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325984046"/>
        <updated>2024-02-20T19:09:18.171Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "search-suggestion-for-prerender2" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M122 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M122 branch you're all set; if you do it after the M122 branch you'll need to merge that CL to the M122 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325834721</id>
        <title>Flag expired : pull-to-refresh is expired in M99</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325834721"/>
        <updated>2024-02-20T19:09:15.269Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "pull-to-refresh" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M99 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M99 branch you're all set; if you do it after the M99 branch you'll need to merge that CL to the M99 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325983966</id>
        <title>Flag expired : permission-storage-access-api is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325983966"/>
        <updated>2024-02-20T19:09:09.473Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "permission-storage-access-api" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325984045</id>
        <title>Flag expired : mouse-and-trackpad-dropdown-menu is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325984045"/>
        <updated>2024-02-20T19:09:04.728Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "mouse-and-trackpad-dropdown-menu" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325992265</id>
        <title>Flag expired : media-route-dial-provider is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325992265"/>
        <updated>2024-02-20T19:09:03.517Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "media-route-dial-provider" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325984044</id>
        <title>Flag expired : launcher-nudge-session-reset is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325984044"/>
        <updated>2024-02-20T19:09:00.227Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "launcher-nudge-session-reset" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>326092063</id>
        <title>Flag expired : launcher-local-image-search-ocr is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/326092063"/>
        <updated>2024-02-20T19:08:58.933Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "launcher-local-image-search-ocr" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325992264</id>
        <title>Flag expired : launcher-local-image-search-ica is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325992264"/>
        <updated>2024-02-20T19:08:57.609Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "launcher-local-image-search-ica" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325773378</id>
        <title>Flag expired : launcher-local-image-search is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325773378"/>
        <updated>2024-02-20T19:08:56.496Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "launcher-local-image-search" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
    <entry>
        <id>325992263</id>
        <title>Flag expired : help-app-home-page-app-articles is expired in M124</title>
        <author>
            <name>ch...@chops-service-accounts.iam.gserviceaccount.com</name>
        </author>
        <link href="https://issues.chromium.org/issues/325992263"/>
        <updated>2024-02-20T19:08:51.892Z</updated>
        <summary>-</summary>
        <content type="html">In accordance with //docs/flag_expiry.md, the flag "help-app-home-page-app-articles" has expired and been removed from the chrome://flags UI. This bug tracks cleaning up the code that implements this flag. Please help us clean up the codebase :) If you need help or more context please get in touch with flags-dev@chromium.org.

This bug should be used for removing the flag entry in the flag-metadata.json as well as the code related to the flag.

This bug is generated based on the list of expired flags in flag-metadata.json file as per refs/heads/main@{#1262818}

This flag has been marked as expiring in M124 or earlier. This bug has been opened for the Eng teams to clean up the references for the flag in the //chrome/browser/flag-metadata.json as well as references to that flag.

This is a friendly reminder to help get this clean up completed.

If you think this flag needs to be extended beyond this milestone, please follow these steps:
- If you see a flag listed as expiring that you want to keep, create a CL updating //chrome/browser/flag-metadata.json with an appropriate new expiration milestone.
- If you do this before the M124 branch you're all set; if you do it after the M124 branch you'll need to merge that CL to the M124 branch as well.

You can check the branch date for this milestone at https://chromiumdash.appspot.com/schedule</content>
    </entry>
</feed>